@using Quizler.Web.Shared.Models.Quizzes
@using Quizler.Web.Shared.Models.Categories
@using Quizler.Web.Client.Pages.Questions;
@using Quizler.Web.Shared.Models.Questions
@using Quizler.Web.Shared.Models.Answers
@using System.IO;

@inject Blazor.FileReader.IFileReaderService fileReaderService

@page "/quizzes/edit/{QuizId:int}"

@if (Quiz == null || Categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="container justify-content-center">
    <div class="card w-75">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <img src="@Quiz.ImageUrl" style="width: 12rem;">
                </div>
                <div class="col">
                    <EditForm Model="Quiz" OnValidSubmit="Update">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group">
                            <label for="Name">Quiz name</label>
                            <InputText class="form-control" @bind-Value="Quiz.Name" placeholder="Give your quiz a name" />
                        </div>
                        <div class="form-group">
                            <label for="Name">Select your category</label>
                            <InputSelectNumber @bind-Value="Quiz.CategorieId" id="categoryName" class="form-control">
                                @foreach (var categorie in Categories)
                                    {
                                    <option value="@categorie.Id">@categorie.Name</option>
                                    }
                                /**/
                                /**/
                                /**/
                                /**/
                                /**/
                                /**/
                            </InputSelectNumber>
                        </div>
                        <div class="input-group mb-3">
                            <div class="input-group-prepend">
                                <span class="input-group-text" id="inputGroupFileAddon01">Upload</span>
                            </div>
                            <div class="custom-file">
                                <input type="file" class="custom-file-input" id="inputGroupFile01" aria-describedby="inputGroupFileAddon01" @ref="fileUpload" @onchange="UploadFile">
                                <label class="custom-file-label" for="inputGroupFile01">Choose file</label>
                            </div>
                        </div>
                        <button type="submit" class="btn btn-warning">Edit</button>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="d-flex justify-content-between">
        <div>
            @if (currentQuestoinPage > 0)
            {
                <button type="button" class="btn btn-info" @onclick="PreviousQuestion">Prefvious</button>
            }
        </div>
        <h3><strong>Question @(currentQuestoinPage + 1) / @Quiz.Questions.Count</strong></h3>
        <div>
            @if (currentQuestoinPage < Quiz.Questions.Count - 1)
            {
                <button type="button" class="btn btn-info" @onclick="NextQuestion">Next</button>

            }
            </div>
        </div>
   <br />
    <div class="card">
        <div class="card-body">
            <p>Create question</p>
            <EditForm Model="CurrentQuestion" OnValidSubmit="UpdateQuestion">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <div class="container-fluid">
                    <div class="row">
                        <div class="col-md-12">
                            <InputText class="form-control" @bind-Value="CurrentQuestion.Text" placeholder="Write yor question here" />
                        </div>
                        <div class="col-md-4 ml-auto">
                            <InputNumber @bind-Value="@CurrentQuestion.Points" class="form-control" placeholder="Add poins" />
                        </div>
                    </div>
                    <hr />
                    <div class="row">
                        <div class="col-sm-9">
                            <InputText @bind-Value="@CurrentQuestion.Answers[0].Text" class="form-control" placeholder="Answer option" />
                            <ValidationMessage For="@(() => CurrentQuestion.Answers[0].Text)" />
                        </div>
                        <div class="col-md-2 ml-auto">
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox @bind-Value="@CurrentQuestion.Answers[0].IsCorrect" class="custom-control-input" id="customCheck1" />
                                <label class="custom-control-label" for="customCheck1"></label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-9">
                            <InputText @bind-Value="@CurrentQuestion.Answers[1].Text" class="form-control" placeholder="Answer option" />
                            <ValidationMessage For="@(() => CurrentQuestion.Answers[1].Text)" />
                        </div>
                        <div class="col-md-2 ml-auto">
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox @bind-Value="@CurrentQuestion.Answers[1].IsCorrect" class="custom-control-input" id="customCheck2" />
                                <label class="custom-control-label" for="customCheck2"></label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-9">
                            <InputText @bind-Value="@CurrentQuestion.Answers[2].Text" class="form-control" placeholder="Answer option" />
                            <ValidationMessage For="@(() => CurrentQuestion.Answers[2].Text)" />
                        </div>
                        <div class="col-md-2 ml-auto">
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox @bind-Value="@CurrentQuestion.Answers[2].IsCorrect" class="custom-control-input" id="customCheck3" />
                                <label class="custom-control-label" for="customCheck3"></label>
                            </div>
                        </div>
                    </div>
                    <br />
                    <div class="row">
                        <div class="col-sm-9">
                            <InputText @bind-Value="@CurrentQuestion.Answers[3].Text" class="form-control" placeholder="Answer option" />
                            <ValidationMessage For="@(() => CurrentQuestion.Answers[3].Text)" />
                        </div>
                        <div class="col-md-2 ml-auto">
                            <div class="custom-control custom-checkbox">
                                <InputCheckbox @bind-Value="@CurrentQuestion.Answers[3].IsCorrect" class="custom-control-input" id="customCheck4" />
                                <label class="custom-control-label" for="customCheck4"></label>
                            </div>
                        </div>
                    </div>
                    <br />
                </div>
                <button type="submit" class="btn btn-success" @onclick="UpdateQuestion">Edit</button>
            </EditForm>
        </div>
    </div>
</div>
    <br />
}

@code {
    [Parameter]
    public int QuizId { get; set; }

    private QuizEditResponse Quiz = new QuizEditResponse();
    private AnswerEditResponse Answer = new AnswerEditResponse();

    private CategorieResponse[] Categories;
    private QuizResponse quizResponse;
    private QuestionResponse questionResponse;
    private AnswerResponse answerResponse;

    public QuestionEditResponse CurrentQuestion { get; set; }

    private int currentQuestoinPage { get; set; }

    ElementReference fileUpload;
    string imageData = string.Empty;

    async void UploadFile()
    {
        var files = await fileReaderService.CreateReference(fileUpload).EnumerateFilesAsync();

        using (MemoryStream ms = await files.First().CreateMemoryStreamAsync())
        {
            Quiz.ImageUrl = $"data:image/jpg;base64,{Convert.ToBase64String(ms.ToArray())}";
        }
    }

    protected override async Task OnInitializedAsync()
    {
        Quiz = await this.HttpClient.GetJsonAsync<QuizEditResponse>($"quizzes/edit/{QuizId}");
        Categories = await this.HttpClient.GetJsonAsync<CategorieResponse[]>("categories/getall");
        Quiz.Questions = await this.HttpClient.GetJsonAsync<List<QuestionEditResponse>>($"questions/All/{Quiz.Id}");

        currentQuestoinPage = 0;

        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
        CurrentQuestion.Answers = Quiz.Questions[currentQuestoinPage].Answers;
        CurrentQuestion.Id = Quiz.Questions[currentQuestoinPage].Id;

    }

    async Task Update()
    {
        Quiz.Id = QuizId;

        quizResponse = await this.HttpClient.PostJsonAsync<QuizResponse>("quizzes/update", Quiz);

        if (quizResponse == null)
        {
            this.Navigation.NavigateTo("error");
        }

        this.Navigation.NavigateTo($"quizzes/details/{QuizId}");
    }

    async Task UpdateQuestion()
    {
        questionResponse = await this.HttpClient.PostJsonAsync<QuestionResponse>("questions/update", CurrentQuestion);

        foreach (var answer in CurrentQuestion.Answers)
        {
            answerResponse = await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/update", answer);
        }
    }

    void PreviousQuestion()
    {
        currentQuestoinPage--;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }

    void NextQuestion()
    {
        currentQuestoinPage++;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }
}
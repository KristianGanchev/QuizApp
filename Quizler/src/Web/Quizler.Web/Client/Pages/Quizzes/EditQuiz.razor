@using Quizler.Web.Shared.Models.Quizzes
@using Quizler.Web.Client.Pages.Questions;
@using Quizler.Web.Shared.Models.Questions
@using Quizler.Web.Shared.Models.Answers

@inject IAppState State

@page "/quizzes/edit/{QuizId:int}/{QuizName}"

@if (quiz == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col">
                <div class="card" style="width: 18rem;">
                    <img src="@this.quiz.ImageUrl" class="card-img-top" alt="...">
                    <div class="card-body">
                        <h5 class="card-title">Quiz name: <strong>@this.quiz.Name</strong></h5>
                        <p class="card-text">Category: <strong>@quiz.Category</strong></p>
                        <a href="#" class="btn btn-primary">Edit</a>
                    </div>
                </div>

                <br />
                <EditForm Model="questionModel" OnValidSubmit="Submit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <CreateQuestion QuestionModel="questionModel"/>
                </EditForm>
            </div>
            <div class="vl"></div>
            <div class="col">
                @if (this.questions == null)
                {
                    <p>Create your first question</p>
                }
                else
                {
                    foreach (var question in questions)
                    {
                        <QuestionEdit Question="@question" />
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public int QuizId { get; set; }

    [Parameter]
    public string QuizName { get; set; }

    private QuizEditResponse quiz = new QuizEditResponse();

    public QuestionResponse[] questions;

    readonly QuestionBindingModel questionModel = new QuestionBindingModel
    {
        FirstAnswer = new AnswerRequest(),
        SecondAnswer = new AnswerRequest(),
        ThirdAnswer = new AnswerRequest(),
        FourthAnswer = new AnswerRequest(),
    };

    protected override async Task OnInitializedAsync()
    {
        quiz = await this.HttpClient.GetJsonAsync<QuizEditResponse>($"quizzes/{QuizId}");

    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
        {
            questions = await this.HttpClient.GetJsonAsync<QuestionResponse[]>($"questions/getall/{QuizId}");
        }
    }


    async Task Submit()
    {
        var questionRequest = new QuestionRequest
        {
            Text = questionModel.Text,
            Points = questionModel.Points,
            QuizId = this.QuizId,
        };


        var questionResponse = await this.HttpClient.PostJsonAsync<QuestionResponse>("questions/create", questionRequest);

        var firstAnswers = new AnswerRequest
        {
            Text = questionModel.FirstAnswer.Text,
            IsCorrect = questionModel.FirstAnswer.IsCorrect,
            QuestionId = questionResponse.Id,
        };

        await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/create", firstAnswers);

        var secondAnswer = new AnswerRequest
        {
            Text = questionModel.SecondAnswer.Text,
            IsCorrect = questionModel.SecondAnswer.IsCorrect,
            QuestionId = questionResponse.Id,
        };

        await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/create", secondAnswer);

        var thirdAnswers = new AnswerRequest
        {
            Text = questionModel.ThirdAnswer.Text,
            IsCorrect = questionModel.ThirdAnswer.IsCorrect,
            QuestionId = questionResponse.Id,
        };

        await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/create", thirdAnswers);

        var fourthAnswers = new AnswerRequest
        {
            Text = questionModel.FourthAnswer.Text,
            IsCorrect = questionModel.FourthAnswer.IsCorrect,
            QuestionId = questionResponse.Id,
        };

        await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/create", fourthAnswers);
    }

    private void OnLoadedData()
    {
        StateHasChanged();
    }
}
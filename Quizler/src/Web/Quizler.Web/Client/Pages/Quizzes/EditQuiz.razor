@using Quizler.Web.Shared.Models.Quizzes
@using Quizler.Web.Shared.Models.Categories
@using Quizler.Web.Client.Pages.Questions;
@using Quizler.Web.Shared.Models.Questions
@using Quizler.Web.Shared.Models.Answers
@using System.IO;

@page "/quizzes/edit-quiz/{QuizId:int}"

@attribute [Authorize]

@if (Quiz == null || Categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container justify-content-center">
        <div class="card w-75">
            <div class="card-body">
                <div class="row">
                    <div class="col">
                        <img src="@Quiz.ImageUrl" style="width: 12rem;">
                    </div>
                    <div class="col">
                        <EditForm Model="Quiz" OnValidSubmit="Update">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <QuizEditInput Quiz="Quiz" />
                            <div class="d-flex justify-content-between">
                                <div>
                                    <button type="submit" class="btn btn-warning">Edit</button>
                                </div>
                                <div>
                                    <button type="button" class="btn btn-danger" @onclick="DeleteQuiz">Delete</button>
                                </div>
                            </div>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
        <br />

        @if (this.Quiz.Questions.Any())
        {
            <div class="d-flex justify-content-between">
                <div>
                    @if (currentQuestoinPage > 0)
                    {
                        <button type="button" class="btn btn-info" @onclick="PreviousQuestion">Prefvious</button>
                    }
                </div>
                <h3><strong>Question @(currentQuestoinPage + 1) / @Quiz.Questions.Count</strong></h3>
                <div>
                    @if (currentQuestoinPage < Quiz.Questions.Count - 1)
                    {
                        <button type="button" class="btn btn-info" @onclick="NextQuestion">Next</button>

                    }
                </div>
            </div>
            <br />

            <div class="card">
                <div class="card-body">
                    <p>Create question</p>
                    <EditForm Model="CurrentQuestion" OnValidSubmit="UpdateQuestion">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <QuestionEdit Question="CurrentQuestion" />
                        <div class="d-flex justify-content-between">
                            <div>
                                <button type="submit" class="btn btn-warning">Edit</button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-danger" @onclick="DeleteQuestion">Delete</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        }
        else
        {
            <h3>No question for this quiz</h3>
        }

    </div>
    <br />
}

@code {
    [Parameter]
    public int QuizId { get; set; }

    private QuizEditResponse Quiz = new QuizEditResponse();
    private AnswerEditResponse Answer = new AnswerEditResponse();

    private CategorieResponse[] Categories;

    public QuestionEditResponse CurrentQuestion { get; set; }

    private int currentQuestoinPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Quiz = await this.QuizService.GetById<QuizEditResponse>(this.QuizId, "quizzes/edit/");
        Categories = await this.CategorieService.GetAll<CategorieResponse[]>("categories/getall");
        Quiz.Questions = await this.QuestionService.GetAllByQuizId<List<QuestionEditResponse>>(this.QuizId);

        currentQuestoinPage = 0;

        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
        CurrentQuestion.Answers = Quiz.Questions[currentQuestoinPage].Answers;
        CurrentQuestion.Id = Quiz.Questions[currentQuestoinPage].Id;

    }

    async Task Update()
    {
        await this.QuizService.UpdateAsync(this.Quiz);
    }

    async Task DeleteQuiz()
    {
        await this.QuizService.DeleteAsync(this.QuizId);

    }

    async Task DeleteQuestion()
    {
        if (Quiz.Questions.Count <= 4)
        {
            return;
        }

        await this.QuestionService.DeleteAsync(this.CurrentQuestion.Text, this.QuizId);

        this.Quiz.Questions.Remove(CurrentQuestion);
        if (currentQuestoinPage > 0)
        {
            currentQuestoinPage--;
        }
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
        StateHasChanged();
    }

    async Task UpdateQuestion()
    {
        await this.QuestionService.UpdateAsync(CurrentQuestion);
    }

    void PreviousQuestion()
    {
        currentQuestoinPage--;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }

    void NextQuestion()
    {
        currentQuestoinPage++;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }
}
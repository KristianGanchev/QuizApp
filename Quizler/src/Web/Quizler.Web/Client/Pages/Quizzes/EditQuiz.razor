@using Quizler.Web.Shared.Models.Quizzes
@using Quizler.Web.Shared.Models.Categories
@using Quizler.Web.Client.Pages.Questions;
@using Quizler.Web.Shared.Models.Questions
@using Quizler.Web.Shared.Models.Answers
@using System.IO;

@page "/quizzes/edit/{QuizId:int}"

@if (Quiz == null || Categories == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="container justify-content-center">
    <div class="card w-75">
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <img src="@Quiz.ImageUrl" style="width: 12rem;">
                </div>
                <div class="col">
                    <EditForm Model="Quiz" OnValidSubmit="Update">
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <QuizEditInput Quiz="Quiz" />
                        <div class="d-flex justify-content-between">
                            <div>
                                <button type="submit" class="btn btn-warning">Edit</button>
                            </div>
                            <div>
                                <button type="button" class="btn btn-danger" @onclick="DeleteQuiz">Delete</button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
    <br />
    <div class="d-flex justify-content-between">
        <div>
            @if (currentQuestoinPage > 0)
            {
                <button type="button" class="btn btn-info" @onclick="PreviousQuestion">Prefvious</button>
            }
        </div>
        <h3><strong>Question @(currentQuestoinPage + 1) / @Quiz.Questions.Count</strong></h3>
        <div>
            @if (currentQuestoinPage < Quiz.Questions.Count - 1)
            {
                <button type="button" class="btn btn-info" @onclick="NextQuestion">Next</button>

            }
            </div>
        </div>
   <br />
    <div class="card">
        <div class="card-body">
            <p>Create question</p>
            <EditForm Model="CurrentQuestion" OnValidSubmit="UpdateQuestion">
                <DataAnnotationsValidator />
                <ValidationSummary />
                <QuestionEdit Question="CurrentQuestion"/>
                <div class="d-flex justify-content-between">
                    <div>
                        <button type="submit" class="btn btn-warning">Edit</button>
                    </div>
                    <div>
                        <button type="button" class="btn btn-danger" @onclick="DeleteQuestion">Delete</button>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>
    <br />
}

@code {
    [Parameter]
    public int QuizId { get; set; }

    private QuizEditResponse Quiz = new QuizEditResponse();
    private AnswerEditResponse Answer = new AnswerEditResponse();

    private CategorieResponse[] Categories;
    private QuizResponse quizResponse;
    private QuestionResponse questionResponse;
    private AnswerResponse answerResponse;

    public QuestionEditResponse CurrentQuestion { get; set; }

    private int currentQuestoinPage { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Quiz = await this.HttpClient.GetJsonAsync<QuizEditResponse>($"quizzes/edit/{QuizId}");
        Categories = await this.HttpClient.GetJsonAsync<CategorieResponse[]>("categories/getall");
        Quiz.Questions = await this.HttpClient.GetJsonAsync<List<QuestionEditResponse>>($"questions/All/{Quiz.Id}");

        currentQuestoinPage = 0;

        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
        CurrentQuestion.Answers = Quiz.Questions[currentQuestoinPage].Answers;
        CurrentQuestion.Id = Quiz.Questions[currentQuestoinPage].Id;

    }

    async Task Update()
    {
        Quiz.Id = QuizId;

        quizResponse = await this.HttpClient.PostJsonAsync<QuizResponse>("quizzes/update", Quiz);

        if (quizResponse == null)
        {
            this.Navigation.NavigateTo("error");
        }

        this.Navigation.NavigateTo($"quizzes/details/{QuizId}");
    }

    async Task DeleteQuiz()
    {
        await this.HttpClient.DeleteAsync($"quizzes/delete/{QuizId}");
        this.Navigation.NavigateTo("quizzes/my-quizzes");

    }

    async Task DeleteQuestion()
    {
        int questionId = await this.HttpClient.GetJsonAsync<int>($"questions/?questionName={CurrentQuestion.Text}&quizId={QuizId}");
        Console.WriteLine(questionId);
        await this.HttpClient.DeleteAsync($"questions/delete/{questionId}");
        this.Quiz.Questions.Remove(CurrentQuestion);
    }

    async Task UpdateQuestion()
    {
        questionResponse = await this.HttpClient.PostJsonAsync<QuestionResponse>("questions/update", CurrentQuestion);

        foreach (var answer in CurrentQuestion.Answers)
        {
            answerResponse = await this.HttpClient.PostJsonAsync<AnswerResponse>("answers/update", answer);
        }
    }

    void PreviousQuestion()
    {
        currentQuestoinPage--;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }

    void NextQuestion()
    {
        currentQuestoinPage++;
        CurrentQuestion = Quiz.Questions[currentQuestoinPage];
    }
}
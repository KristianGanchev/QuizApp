@page "/quizzes/create"

@using Quizler.Web.Shared.Models.Quizzes
@using Quizler.Web.Shared.Models.Questions
@using Quizler.Web.Shared.Models.Answers
@using Quizler.Web.Client.Pages.Questions

@attribute [Authorize]

<div class="card">
    <div class="card-body">
        <div class="row">
            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <EditForm Model="Quiz" OnValidSubmit="Submit">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <QuizInput Quiz="Quiz" />
                            <button type="submit" class="btn btn-success btn-lg btn-block">Create your quiz</button>
                        </EditForm>
                    </div>
                </div>
            </div>
            <div class="col">
                <div class="card">
                    <div class="card-body">
                        <p>Create question</p>
                        <EditForm Model="CurrentQuestion" OnValidSubmit="CreateQuestion">
                            <DataAnnotationsValidator />
                            <ValidationSummary />
                            <QuestionInput Question="CurrentQuestion" />
                            <button type="submit" class="btn btn-success">Create</button>
                        </EditForm>
                    </div>
                </div>
            </div>
        </div>
    </div>
    @foreach (var question in this.Quiz.Questions)
    {
        <div class="card">
            <div class="card-body">
                <h5 class="card-title"><strong>@question.Text</strong></h5>
                <hr />
                <div class="container">
                    <div class="row">
                        @foreach (var answer in question.Answers)
                        {
                            <h4>@answer.Text</h4>
                        }
                    </div>
                </div>
                <button type="button" class="btn btn-danger" @onclick="(() => RemoveQuestion(question)) ">Remove</button>
            </div>
        </div>
        <br />
    }
</div>

@code {
    readonly QuizCreateRequest Quiz = new QuizCreateRequest();

    public QuestionCreateRequest CurrentQuestion = new QuestionCreateRequest
    {
        Answers = new List<AnswerCreateRequest>()
{
            new AnswerCreateRequest(),
            new AnswerCreateRequest(),
            new AnswerCreateRequest(),
            new AnswerCreateRequest()
        }
    };

    protected override void OnInitialized()
    {
        this.Quiz.Questions = new List<QuestionCreateRequest>();
    }

    protected void CreateQuestion()
    {
        this.Quiz.Questions.Add(CurrentQuestion);
        this.CurrentQuestion = new QuestionCreateRequest
        {
            Answers = new List<AnswerCreateRequest>()
{
            new AnswerCreateRequest(),
            new AnswerCreateRequest(),
            new AnswerCreateRequest(),
            new AnswerCreateRequest()
        }
        };
    }
    protected void RemoveQuestion(QuestionCreateRequest question)
    {
        this.Quiz.Questions.Remove(question);
    }

    async Task Submit()
    {
        await this.QuizService.CreateAsync(this.Quiz);
    }
}

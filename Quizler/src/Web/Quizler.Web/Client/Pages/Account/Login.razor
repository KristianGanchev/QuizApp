@page "/login"

@using Quizler.Web.Shared.Models.Account;
@using Quizler.Web.Client.Services

@inject IAuthService AuthService
@inject NavigationManager NavigationManager


@if (ShowErrors)
{
    <div class="alert alert-danger" role="alert">
        <p>@Error</p>
    </div>
}

<div class="d-flex justify-content-center">
    <div class="card w-75">
        <div class="card-body">
            <h5 class="card-title">Please enter your details</h5>
            <EditForm Model="loginModel" OnValidSubmit="HandleLogin">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label for="email">Email address</label>
                    <InputText Id="email" Class="form-control" @bind-Value="loginModel.Email" />
                    <ValidationMessage For="@(() => loginModel.Email)" />
                </div>
                <div class="form-group">
                    <label for="password">Password</label>
                    <InputText Id="password" type="password" Class="form-control" @bind-Value="loginModel.Password" />
                    <ValidationMessage For="@(() => loginModel.Password)" />
                </div>
                <div class="row">
                    <div class="col">
                        <button type="submit" class="btn btn-success">Login</button>
                        <hr />
                        <p>Dont`t have an account</p>
                        <a role="button" href="register" class="btn btn-primary">Register</a>
                    </div>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {

    private LoginRequestModel loginModel = new LoginRequestModel();
    private bool ShowErrors;
    private string Error = "";


    protected override async Task OnInitializedAsync()
    {
        if (await this.UserService.IsLoggedIn())
        {
            NavigationManager.NavigateTo("/");
        }
    }

    private async Task HandleLogin()
    {
        ShowErrors = false;

        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            NavigationManager.NavigateTo("/");
        }
        else
        {
            Error = result.Error;
            ShowErrors = true;
        }
    }

}
